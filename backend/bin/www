#!/usr/bin/env node
const mongoose = require("mongoose");
const { mongoURI: db } = require("../config/keys.js");
/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("backend:server");
const http = require("http");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const io = require("socket.io")(server);

const activeUser = {};
io.on("connection", (socket) => {
  console.log("connected");
  socket.emit("connection", null);

  socket.on("test", () => {
    socket.emit("return");
    socket.broadcast.emit("return");
  });

  socket.on("chat-join", (payload) => {
    console.log("user joined chat");
    if (activeUser[payload.chatroomId]) {
      if (!activeUser[payload.chatroomId].includes(payload.userId)) {
        activeUser[payload.chatroomId].push(payload.userId);
      }
    } else {
      activeUser[payload.chatroomId] = [payload.userId];
    }
    console.log(activeUser, activeUser[payload.chatroomId]);
    socket.emit("user-join", activeUser);
    socket.broadcast.emit("user-join", activeUser);
    // callback(activeUser[payload.chatroomId]);
  });

  socket.on("chat-leave", (payload) => {
    if (activeUser[payload.chatroomId]) {
      console.log("user left chat");
      let removeUserIndex = activeUser[payload.chatroomId].indexOf(
        payload.userId
      );
      console.log(removeUserIndex);
      if (removeUserIndex != -1) {
        activeUser[payload.chatroomId].splice(removeUserIndex, 1);
      }
    }
    console.log(activeUser, activeUser[payload.chatroomId]);
    socket.emit("user-leave", activeUser);
    socket.broadcast.emit("user-leave", activeUser);
    // callback(activeUser[payload.chatroomId]);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

mongoose
  .connect(db, { useNewUrlParser: true })
  .then(() => {
    // Use `debug` instead of `dbLogger` if you did not split the debug
    // console into `dbLogger` and `serverLogger` above.
    debug("Connected to MongoDB successfully");
    server.listen(port, () => {
      console.log("listening on 5000");
    });
  })
  // Use `debug` instead of `serverLogger` if you did not split the debug
  // console into `dbLogger` and `serverLogger` above.
  .catch((err) => debug(err));

// server.listen(port);
// server.on("error", onError);
// server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
